
shader ShaderUtils : Transformation
{
    // CONSTANTS ==============================================================
 
    #define TwoPi 			6.283185307179586476925286766559
    #define invTwoPi		0.15915494309189533576888376337251
    #define Pi 				3.1415926535897932384626433832795
    #define invPi 			0.31830988618379067153776752674503



    // SPRITES UTILS ==============================================================
 
    void CircleSpriteDiscard(float2 uv)
    {
        if(length(uv - 0.5f) > 0.5f)
        {
            discard;
        }
    }


    static const float3 QuadPositions[4] = {
        float3(-1, 1,0),
        float3( 1, 1,0),
        float3(-1, -1,0),
        float3( 1, -1,0),
    };

    static const float2 QuadUV[4] = {
        float2(0,1), 
        float2(1,1),
        float2(0,0),
        float2(1,0)
    };

     // CULLING ==============================================================

    bool DotCulling(float3 pos, float CullingThreshold)
    {
	    float3 vec = pos - Eye.xyz;
	    float dotValue = dot(normalize(vec), EyeMS.xyz);
	
	    return dotValue > CullingThreshold;
    }

    float DotCullingDbg(float3 pos, float CullingThreshold)
    {
	    float3 vec = pos - Eye.xyz;
	    float dotValue = dot(normalize(vec), EyeMS.xyz);
	
	    return dotValue;
    }

    // COLOR UTILS ==============================================================

    float4 BitsToColor(float f)
    {
	    uint u = asuint( f );
	    float4 c;
	    c = float4(
	    (u>>0)%256,
	    (u>>8)%256,
	    (u>>16)%256,
	    (u>>24)%256
	    )/255.0;
	    return c;
    }



    float3 HUEtoRGB(in float H)
    {
	    H=frac(H);
	    float R = abs(H * 6 - 3) - 1;
	    float G = 2 - abs(H * 6 - 2);
	    float B = 2 - abs(H * 6 - 4);
	    return saturate(float3(R,G,B));
    }

    float3 HSVtoRGB(in float3 HSV)
    {
	    float3 RGB = HUEtoRGB(HSV.x);
	    return ((RGB - 1) * HSV.y + 1) * HSV.z;
    }

    float3 HSLtoRGB(in float3 HSL)
    {
	    float3 RGB = HUEtoRGB(HSL.x);
	    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
	    return (RGB - 0.5) * C + HSL.z;
    }

    float3 RGBtoHSV(in float3 RGB)
    {
	    float3 HSV = 0;
	    HSV.z = max(RGB.r, max(RGB.g, RGB.b));
	    float M = min(RGB.r, min(RGB.g, RGB.b));
	    float C = HSV.z - M;
	    if (C != 0)
        {
		    float4 RGB0 = float4(RGB, 0);
		    float4 Delta = (HSV.z - RGB0) / C;
		    Delta.rgb -= Delta.brg;
		    Delta.rgb += float3(2,4,6);
		    Delta.brg = step(HSV.z, RGB) * Delta.brg;
		    HSV.x = max(Delta.r, max(Delta.g, Delta.b));
		    HSV.x = frac(HSV.x / 6);
		    HSV.y = 1 / Delta.w;
	    }
	    return HSV;
    }

    float3 RGBtoHSL(in float3 RGB)
    {
        float3 HSL = 0;
        float U, V;
        U = -min(RGB.r, min(RGB.g, RGB.b));
        V = max(RGB.r, max(RGB.g, RGB.b));
        HSL.z = (V - U) * 0.5;
        float C = V + U;
        if (C != 0)
        {
            float3 Delta = (V - RGB) / C;
            Delta.rgb -= Delta.brg;
            Delta.rgb += float3(2,4,6);
            Delta.brg = step(V, RGB) * Delta.brg;
            HSL.x = max(Delta.r, max(Delta.g, Delta.b));
            HSL.x = frac(HSL.x / 6);
            HSL.y = C / (1 - abs(2 * HSL.z - 1));
        }

	    return HSL;
    }



    ////////////////////////////////////////////////////////////////
    //
    //             Bicubic sampling
    //
    ////////////////////////////////////////////////////////////////

    float BSplineCubic(float p1, float p2, float p3, float p4, float range) 
    {
        float mu = frac(range);
        float a0 = p4 - p3*3 + p2*3 - p1;
        float a1 = p3*3 - p2*6 + p1*3.;
        float a2 = p3*3 - p1*3;
        float a3 = p3 + p2*4 + p1;
        return (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
    }


    float2 BSplineCubic(float2 p1, float2 p2, float2 p3, float2 p4, float range) 
    {
        float mu = frac(range);
        float2 a0 = p4 - p3*3 + p2*3 - p1;
        float2 a1 = p3*3 - p2*6 + p1*3.;
        float2 a2 = p3*3 - p1*3;
        float2 a3 = p3 + p2*4 + p1;
        return (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
    }


    float3 BSplineCubic(float3 p1, float3 p2, float3 p3, float3 p4, float range) 
    {
        float mu = frac(range);
        float3 a0 = p4 - p3*3 + p2*3 - p1;
        float3 a1 = p3*3 - p2*6 + p1*3.;
        float3 a2 = p3*3 - p1*3;
        float3 a3 = p3 + p2*4 + p1;
        return (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
    }


    struct SplinePosTan3
    {
      float3 Pos;
      float3 Tang;
    };

    SplinePosTan3 BSplineCubic3PT(float3 p1, float3 p2, float3 p3, float3 p4, float range) 
    {
        SplinePosTan3 Out = (SplinePosTan3)0;
        float mu = frac(range);
        float3 a0 = p4 - p3*3 + p2*3 - p1;
        float3 a1 = p3*3 - p2*6 + p1*3.;
        float3 a2 = p3*3 - p1*3;
        float3 a3 = p3 + p2*4 + p1;
        Out.Pos = (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
        Out.Tang = normalize((mu*(2*a0*mu+a1)+mu*(a0*mu+a1)+a2)/6.);
        return Out;
    }



};