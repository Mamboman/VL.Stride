
shader HappyStructuredBufferUtils
{

    ////////////////////////////////////////////////////////////////
    //
    //             Structured Buffer Helpers
    //
    ////////////////////////////////////////////////////////////////

    // Buffersize
    uint sbSize1 (StructuredBuffer<float> sBuffer)
    {
	    uint count, dummy;	
	    sBuffer.GetDimensions(count,dummy);
	    return count;
    }

    uint sbSize2 (StructuredBuffer<float2> sBuffer)
    {
	    uint count, dummy;	
	    sBuffer.GetDimensions(count,dummy);
	    return count;
    }

    uint sbSize3 (StructuredBuffer<float3> sBuffer)
    {
	    uint count, dummy;	
	    sBuffer.GetDimensions(count,dummy);
	    return count;
    }

    uint sbSize4 (StructuredBuffer<float4> sBuffer)
    {
	    uint count, dummy;	
	    sBuffer.GetDimensions(count,dummy);
	    return count;
    }

    //uint sbSize (StructuredBuffer<float4x4> sBuffer)
    //{
	   // uint count, dummy;	
	   // sBuffer.GetDimensions(count,dummy);
	   // return count;
    //}

    uint sbSizeU (StructuredBuffer<uint> sBuffer)
    {
	    uint count, dummy;	
	    sBuffer.GetDimensions(count,dummy);
	    return count;
    }

    // Safe Buffer Load with Defualt value

    float sbLoad(StructuredBuffer<float> sBuffer, float defaultValue, uint dtid)
    {
	    float value = defaultValue;
	    uint count = sbSize1(sBuffer);
	    if (count > 0) value = sBuffer[dtid.x % count];
	    return value;
    }

    float2 sbLoad(StructuredBuffer<float2> sBuffer, float2 defaultValue, uint dtid)
    {
	    float2 value = defaultValue;
	    uint count = sbSize2(sBuffer);
	    if (count > 0) value = sBuffer[dtid.x % count];
	    return value;
    }

    float3 sbLoad(StructuredBuffer<float3> sBuffer, float3 defaultValue, uint dtid)
    {
	    float3 value = defaultValue;
	    uint count = sbSize3(sBuffer);
	    if (count > 0) value = sBuffer[dtid.x % count];
	    return value;
    }

    float4 sbLoad(StructuredBuffer<float4> sBuffer, float4 defaultValue, uint dtid)
    {
	    float4 value = defaultValue;
	    uint count = sbSize4(sBuffer);
	    if (count > 0) value = sBuffer[dtid.x % count];
	    return value;
    }

    //float4x4 sbLoad(StructuredBuffer<float4x4> sBuffer, float4x4 defaultValue, uint dtid)
    //{
	   // float4x4 value = defaultValue;
	   // uint count = sbSize(sBuffer);
	   // if (count > 0) value = sBuffer[dtid.x % count];
	   // return value;
    //}

    uint sbLoad(StructuredBuffer<uint> sBuffer, uint defaultValue, uint dtid)
    {
	    uint value = defaultValue;
	    uint count = sbSizeU(sBuffer);
	    if (count > 0) value = sBuffer[dtid.x % count];
	    return value;
    }


    ////////////////////////////////////////////////////////////////
    //EOF

};