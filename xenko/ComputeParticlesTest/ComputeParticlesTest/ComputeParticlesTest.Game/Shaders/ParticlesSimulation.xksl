
    
/// <summary>
/// A test compute shader
/// </summary>
shader ParticlesSimulation: ComputeShaderBase, Global, H_Attractors, ParticlesUtils_PosVelInfoCol, H_Perlin, ShaderUtils
{    
    RWStructuredBuffer<Particle> ParticlesBuffer;

    struct SimulationSettings
    {   
        float4 Gravity;
        float VelDamp_delta;
        float VelDamp_min;
        float VelDamp_gamma;
        float Target_Enable;
        float Target_Strength; 
        row_major float4x4 Target_T; 
        float Bounce_Enable;
        float Bounce_Friction;
        float Bounce_Damp;
        float PerlinForce_Time;
        float PerlinForce_Amount;
    };

    StructuredBuffer<SimulationSettings> SimulationSettingsBuffer;

    StructuredBuffer<float3> RandomBuffer;
    Texture2DMS<float4> Pointcloud_PosCol;

    override void Compute()
    {
        SimulationSettings s = SimulationSettingsBuffer[0];
        int id = streams.DispatchThreadId.x;
        Particle POut = ParticlesBuffer[id];

 	    float3 p = POut.Pos.xyz;
	    float3 v = POut.Vel.xyz;

	    //// VELOCITY DAMPING:
	    float damping = pow(abs(RandomBuffer[id].z), s.VelDamp_gamma);
	    damping *= s.VelDamp_delta;
	    damping += s.VelDamp_min;	
	    v *= damping;

	    // NOISE FORCE:
        PerlinSettings pSet;
        pSet.Octaves = 1;
        pSet.Frequency = 0.3;
        pSet.Lacunarity= 1.666;
        pSet.Persistence= 0.666;

	    float3 noiseF = float3(	fBm(float4(p+float3(51,2.36,-5), s.PerlinForce_Time), pSet),
							    fBm(float4(p+float3(98.2,-9,-36), s.PerlinForce_Time), pSet),
							    fBm(float4(p+float3(0,10.69,6), s.PerlinForce_Time), pSet));
	    v += noiseF * s.PerlinForce_Amount;

        // TARGET FORCE:

        //float4 PointcloudTrg = Pointcloud_PosCol.Load(int2(id%4096, id/4096),0);
	    //float3 trgPos = mul(float4(PointcloudTrg.xzy*0.01,1), s.Target_T).xyz;
	    //float3 trgF = (trgPos - p) * s.Target_Strength;
	    float3 trgPos = mul(float4(RandomBuffer[id].xy-0.5,0, 1), s.Target_T).xyz;
	    float3 trgF = (trgPos - p) * s.Target_Strength;
	    v += trgF;

   	    // ATTRACTORS:
	    v += attrVel(p);


        POut.Vel.xyz = v + s.Gravity.xyz;
        POut.Pos.xyz = p + v;

        //POut.pos.x += pSet.Octaves;

        //POut.info.yzw = BitsToColor(PointcloudTrg.w).xyz;
        POut.Info.yzw = POut.Vel.xyz * 20 + 0.5;
        POut.Info.x += Global.TimeStep;

        ParticlesBuffer[id] = POut;
    }
};

