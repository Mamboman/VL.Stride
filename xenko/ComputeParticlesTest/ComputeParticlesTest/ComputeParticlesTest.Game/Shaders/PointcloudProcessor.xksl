
    
/// <summary>
/// A test compute shader
/// </summary>
shader PointcloudProcessor: ComputeShaderBase, Global, H_Perlin, PointStruct, Transformation, ShaderUtils
{    
    AppendStructuredBuffer<Point> PointsBuffer;

    //StructuredBuffer<float3> RandomBuffer;
    Texture2DMS<float4> Pointcloud_PosCol;
    Texture2DMS<float> Pointcloud_Custom;

    struct ProcessorSettings
    {   
        uint Points_Count;
	    float Points_Size;
        float Culling_DotThreshold;
        row_major float4x4 Pointcloud_T;
        float pad;
    };
    StructuredBuffer<ProcessorSettings> ProcessorSettingsBuffer;

   
    // CS =====================================================================

    override void Compute()
    {
        ProcessorSettings s = ProcessorSettingsBuffer[0];
        uint id = streams.DispatchThreadId.x;

        //if(id>=s.Points_Count) return;

        Point PointOut;

        uint sizeX, sizeY, Dummy;
        Pointcloud_PosCol.GetDimensions(sizeX, sizeY, Dummy);
        uint2 PixelCoords = int2(id % 4096, id / 4096);
        float4 PointcloudTexData1 = Pointcloud_PosCol.Load(PixelCoords, 0);

        // Point position:
        PointOut.Pos.xyz = PointcloudTexData1.xzy * 0.01; // UNREAL AXIS AND SCALE SYSTEM!!!!
        PointOut.Pos.w = 1;

        // CULLING:
        bool cull = DotCulling(PointOut.Pos.xyz, s.Culling_DotThreshold);
        //float dotValue = DotCullingDbg(PointOut.Pos.xyz, s.Culling_DotThreshold);
       // if(!Cull) return;
        if(cull)
        {
	        // NOISE FORCE:
         //   PerlinSettings pSet;
         //   pSet.Octaves = 1;
         //   pSet.Frequency = 0.3;
         //   pSet.Lacunarity= 1.666;
         //   pSet.Persistence= 0.666;

	        //float3 noiseF = float3(	fBm(float4(p+float3(51,2.36,-5), s.PerlinForce_Time), pSet),
					    //		    fBm(float4(p+float3(98.2,-9,-36), s.PerlinForce_Time), pSet),
					    //		    fBm(float4(p+float3(0,10.69,6), s.PerlinForce_Time), pSet));
	        //v += noiseF * s.PerlinForce_Amount;

            //float PointcloudTexData2 = Pointcloud_Custom.Load(PixelCoords,0).x;

            // Point color:
            PointOut.ColSize.xyz = BitsToColor(PointcloudTexData1.w).xyz;
            // Point size:
            PointOut.ColSize.w = s.Points_Size;

            PointsBuffer.Append(PointOut);
        }
    }
};

