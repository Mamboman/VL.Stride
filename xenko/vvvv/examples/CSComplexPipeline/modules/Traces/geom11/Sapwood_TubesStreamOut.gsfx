
//==============================================================================
//==============================================================================
//PARAMETERS ===================================================================
//==============================================================================
//==============================================================================

//float4x4 tVP: VIEWPROJECTION ;

int splRes = 64;
int CtrlPS = 10; // Input Vertices per tube
float CtrlPSInv = 1; // Input Vertices per tube

int TubeShapeRes = 7;
float TessFactor = 1;


float3 CullPos : CULL_POS;
float3 CullDir : CULL_DIR;


//float4 DistDynamicRes = float4(0, 400, 7, 4);	// minDist, maxDist, minDistRes, MaxDistRes 

/*
struct SpringData
{
	float3 pos;
	float3 vel;
};
StructuredBuffer<SpringData> SplinesBuffer ;
*/
StructuredBuffer<float3> SplinesBuffer ;

struct Spline
{
	float id;
	float initX;
	float length;
	float thickness;
//	float tessFactor;
};
StructuredBuffer<Spline> SplineData ;

StructuredBuffer<float2> rndOffset ;

//StructuredBuffer<float2> RollOffset;
//StructuredBuffer<float> resolution;

Texture1D ColRampTex <string uiname="Color Ramp Texture";>;
SamplerState s : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
};

//==============================================================================
//==============================================================================
// FUNCTIONS ===================================================================
//==============================================================================
//==============================================================================

float DotCullingThresholdValue = 0.61;
float DotCulling(float3 pos)
{
	float3 vec = pos - CullPos;
	float dotValue = dot(normalize(vec), CullDir);
	
	return dotValue > DotCullingThresholdValue;
}
/*
float Culling(float3 pos)
{
	float4 projected = mul(float4(pos, 1), tVP);
	
	projected.xyz /= projected.w;
	
	float result = 0;
	
	if(	all(projected.xy > -1.1) && 
		all(projected.xy < 1.1) && 
		projected.z > 0 && 
		projected.z < 1)
	{
		result = 1;
	}
	
	return result;
}
*/

//==============================================================================
//==============================================================================
// VERTEX SHADER ===============================================================
//==============================================================================
//==============================================================================

struct VS_IN
{
	uint iv : SV_VertexID ;
};

struct VS_OUTPUT
{
	float iv : TEXCOORD0 ;
	int splID : TEXCOORD1 ;
	float2 Ucoord_AB : TEXCOORD2 ;
	bool Cull : TEXCOORD3 ;
	float MeanDist : TEXCOORD4 ;
};

VS_OUTPUT VS(VS_IN In)
{
    VS_OUTPUT Out;
	
	Out.iv = In.iv;
	
		// Tube Index
	int tubeID = In.iv / CtrlPS;
	// Spline Index
	Out.splID = SplineData[tubeID].id ;
	// Segment ID
	int sidx = In.iv % CtrlPS;
	
	float Ucoord_A = 0;	
	float Ucoord_B = 0.5;	
	float Ucoord_C = 1;	
	
	Ucoord_A = Ucoord_A + SplineData[tubeID].initX;
	Ucoord_B = Ucoord_B * SplineData[tubeID].length + SplineData[tubeID].initX;
	Ucoord_C = Ucoord_C * SplineData[tubeID].length + SplineData[tubeID].initX;
	Out.Ucoord_AB = float2(Ucoord_A, Ucoord_B);
	
	// start or end of the spline
	bool SplineBoundsCull = (Ucoord_C >= 0) && (Ucoord_A <= 1);

	int startctrl = Out.splID * splRes;
	int endctrl = startctrl + splRes -1;

	int Uindex_A = floor(Ucoord_A*splRes) + startctrl;
	int Uindex_B = floor(Ucoord_B*splRes) + startctrl;
	int Uindex_C = floor(Ucoord_C*splRes) + startctrl;

	float3 ctrlPos_A = SplinesBuffer[clamp(Uindex_A, startctrl, endctrl)];
	float3 ctrlPos_B = SplinesBuffer[clamp(Uindex_B, startctrl, endctrl)];
	float3 ctrlPos_C = SplinesBuffer[clamp(Uindex_C, startctrl, endctrl)];
	
	Out.Cull = DotCulling(ctrlPos_A) || DotCulling(ctrlPos_B) || DotCulling(ctrlPos_C);
	Out.Cull = Out.Cull && SplineBoundsCull;
	
	Out.MeanDist = distance(ctrlPos_B, CullPos);
	
    return Out;
}

//==============================================================================
//==============================================================================
// HULL SHADER =================================================================
//==============================================================================
//==============================================================================

float2 TessFactor_DistMinMax = float2(100, 600);
float2 TessFactor_MinMaxValue = float2(64, 2);

struct HS_CONSTANT_OUTPUT
{
    float edges[2] : SV_TessFactor ;
};

struct HS_OUTPUT
{
	float iv : TEXCOORD0 ;
};

HS_CONSTANT_OUTPUT HSConst(int pID : SV_PrimitiveID, InputPatch<VS_OUTPUT, 1> In)
{
    HS_CONSTANT_OUTPUT output;
	
	uint tubeID = (uint)pID / CtrlPS;
	float tubeLength = SplineData[tubeID].length;
	
	float distFactor = smoothstep(TessFactor_DistMinMax.x, TessFactor_DistMinMax.y, In[0].MeanDist);
	distFactor = pow(distFactor, 2);
	distFactor = lerp(TessFactor_MinMaxValue.x, TessFactor_MinMaxValue.y, distFactor);
	
	float tessFactor = 1;
    output.edges[0] =1.0f * In[0].Cull;// Detail factor (see below for explanation)
    output.edges[1] = tubeLength  * distFactor * In[0].Cull;//SplineData[tubeID].tessFactor;//8.0f; // Density factor

    return output;
}

[domain("isoline")]
// "integer" / "fractional_even" / "fractional_odd"
[partitioning("fractional_odd")]
[outputtopology("line")]
[outputcontrolpoints(1)]
[patchconstantfunc("HSConst")]
HS_OUTPUT HS(InputPatch<VS_OUTPUT,1 > ip, uint id : SV_OutputControlPointID)
{
    HS_OUTPUT output;
	output.iv = ip[id].iv;
    return output;
}

//==============================================================================
//==============================================================================
// DOMAIN SHADER: ==============================================================
//==============================================================================
//==============================================================================

// FUNCTIONS:

//---- B-Spline ----------------------------------------------------------------
struct pota { float3 Pos; float3 Tang; };
pota BSplineCubic(float3 p1, float3 p2, float3 p3, float3 p4, float range) {
	pota Out = (pota)0;
    float mu = frac(range);
   	float3 a0 = p4 - p3*3 + p2*3 - p1;
   	float3 a1 = p3*3 - p2*6 + p1*3.;
	float3 a2 = p3*3 - p1*3;
   	float3 a3 = p3 + p2*4 + p1;
	Out.Pos = (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
	Out.Tang = (mu*(2*a0*mu+a1)+mu*(a0*mu+a1)+a2)/6.;
	return Out;
}

//==============================================================================
//==============================================================================

struct DS_OUTPUT
{
    float3 position : POSITION ;
	float3 tangent : TEXCOORD2 ;
	//float3 ThRoOf : TEXCOORD3 ; //thickness roll offset
	float Thickness : TEXCOORD3 ; //thickness
	uint tubeID : TEXCOORD0 ;
	float tubeUcoord : TEXCOORD1 ;
	float SplineUpos : TEXCOORD4 ;
	//float4 info : TEXCOORD0 ; // spline ID, tube ID, thickness
};

[domain("isoline")]
DS_OUTPUT DS(HS_CONSTANT_OUTPUT input, OutputPatch<HS_OUTPUT, 1> op, float2 uv : SV_DomainLocation)
{
    DS_OUTPUT Out;

	// Tube Index
	int tubeID = op[0].iv / CtrlPS;
	// Spline Index
	int splID = SplineData[tubeID].id ;
	// Segment ID
	int sidx = op[0].iv % CtrlPS;
	
	float t = uv.x;	
	Out.tubeUcoord = (t + sidx) * CtrlPSInv;
	
	t = Out.tubeUcoord * SplineData[tubeID].length + SplineData[tubeID].initX;
	
	Out.SplineUpos = t;

	int startctrl = splID * splRes;
	int endctrl = startctrl + splRes -1;

	int t2 = floor(t*splRes) + startctrl;
	float3 c1 = SplinesBuffer[clamp(t2-1,startctrl,endctrl)];
	float3 c2 = SplinesBuffer[clamp(t2,startctrl,endctrl)];
	float3 c3 = SplinesBuffer[clamp(t2+1,startctrl,endctrl)];
	float3 c4 = SplinesBuffer[clamp(t2+2,startctrl,endctrl)];
	pota curve = BSplineCubic(c1,c2,c3,c4,t*splRes);
    Out.position = curve.Pos;
	Out.tangent = -normalize(curve.Tang);	
/*	Out.ThRoOf = float3(	SplineData[tubeID].thickness,
							RollOffset[tubeID].x,
							RollOffset[tubeID].y);
*/
	Out.Thickness = SplineData[tubeID].thickness;

	Out.tubeID = tubeID;
	//output.info = float4(splID, tubeID, output.ThRoOf.x, t);// sidx/ CtrlPS);
	
    return Out;
}

//==============================================================================
//==============================================================================
// GEOMETRY SHADER: ============================================================
//==============================================================================
//==============================================================================

// FUNCTIONS:

#define minTwoPi 		-6.283185307179586476925286766559
#define invMinTwoPi		-0.15915494309189533576888376337251
#define TwoPi 			6.283185307179586476925286766559
#define invTwoPi		0.15915494309189533576888376337251
#define Pi 				3.1415926535897932384626433832795
#define invPi 			0.31830988618379067153776752674503

// CONVERT FROM CARTESIAN TO POLAR COORDINATES (vector must be normalized):
float3 polar(float3 vec)
{	return float3(	asin(vec.y)*invTwoPi, 
					atan2(-vec.x, -vec.z)*invTwoPi, 
					0 ); }

// GENERATE ROTATE MATRIX:
float4x4 rotate(float Pitch,
		 float Yaw, 
		 float Roll)
  {
   Pitch *= TwoPi;
   Yaw *= TwoPi;
   Roll *= TwoPi;
   float sx = sin(Pitch);
   float cx = cos(Pitch);
   float sy = sin(Yaw);
   float cy = cos(Yaw);
   float sz = sin(Roll);
   float cz = cos(Roll);
   return float4x4( cz * cy + sz * sx * sy, sz * cx, cz * -sy + sz * sx * cy , 0,
                   -sz * cy + cz * sx * sy, cz * cx, sz *  sy + cz * sx * cy , 0,
                    cx * sy				  ,-sx     , cx * cy                 , 0,
                    0                     , 0      , 0                       , 1);
  }

// GET CIRCLE POSITION:
float3 GetPosition(int i,int tot,float radius)
{
	float s = (float)i / ((float) tot - 1.0f) * 6.2918;
	float3 res;
	res.x = sin(s) * radius;
	res.y = cos(s) * radius;
	res.z = 0.0f;
	return res;
}


//==============================================================================
//==============================================================================
//==============================================================================

struct GS_OUTPUT
{
	float3 pos : POSITION ;
	float3 norm : NORMAL ;
	float3 Col : COLOR ;
//	uint tubeID : TEXCOORD0 ;
	//float4 info : TEXCOORD0 ;
};

float2 InAndOutScaleFactor;

// SPOSTARE IL CULLING NEL HULL SHADER
[maxvertexcount(36)]
void GS0(line DS_OUTPUT In[2], inout TriangleStream<GS_OUTPUT> TriangleOutputStream)
{
    float3 pos0 = In[0].position;
    float3 pos1 = In[1].position;
	float3 PosMean = (pos0.xyz + pos1.xyz)*0.5;
    float3 tang0 = In[0].tangent;
    float3 tang1 = In[1].tangent;	
	
	float SplineUpos0 = In[0].SplineUpos;
	float SplineUpos1 = In[1].SplineUpos;
	float scaleFactor0 = smoothstep(0,InAndOutScaleFactor.x, SplineUpos0);
	scaleFactor0 *= smoothstep(1,1-InAndOutScaleFactor.y, SplineUpos0);
	float scaleFactor1 = smoothstep(0,InAndOutScaleFactor.x, SplineUpos1);
	scaleFactor1 *= smoothstep(1,1-InAndOutScaleFactor.y, SplineUpos1);
	
	float3 pitchYaw0 = polar(tang0);
	float3 pitchYaw1 = polar(tang1);
	float4x4 rot0 = rotate(pitchYaw0.x, pitchYaw0.y, 0);
	float4x4 rot1 = rotate(pitchYaw1.x, pitchYaw1.y, 0);
	
	float3 offsetVec0 = mul(float3(rndOffset[In[0].tubeID],0), (float3x3)rot0).xyz;
	float3 offsetVec1 = mul(float3(rndOffset[In[1].tubeID],0), (float3x3)rot1).xyz;
	
	float Thickness0 = In[0].Thickness;
	float Thickness1 = In[1].Thickness;
	float tubeUcoord0 = In[0].tubeUcoord;
	float tubeUcoord1 = In[1].tubeUcoord;
	
	
	float3 Col_0 = ColRampTex.SampleLevel(s, SplineUpos0, 0).xyz;
	float3 Col_1 = ColRampTex.SampleLevel(s, SplineUpos1, 0).xyz;
	
/*
	float DistDynRes = smoothstep(DistDynamicRes.x, DistDynamicRes.y, distance(PosMean, cullPos));
	DistDynRes = lerp(DistDynamicRes.z, DistDynamicRes.w, DistDynRes);
*/	
	float Cull = 1;//Culling(PosMean);

	if(Cull && (scaleFactor0>0 || scaleFactor1>0))
	{
	    for(int i=0; i<TubeShapeRes; i++)
	    {
		    GS_OUTPUT Out; 	
		    // Point 0:
	    	// section extrusion:
		    float3 pos = GetPosition(i,TubeShapeRes,Thickness0);
	    	// Orientation
	    	pos = mul(float4(pos,1), rot0).xyz;
	     	// get normal from pos before translating and offsetting it        	
		    Out.norm = normalize(pos);
	    	// scale factor:
	    	pos *= scaleFactor0;
	    	// final Position:
		    pos += pos0 + offsetVec0;
		    Out.pos = pos;//float4(pos, 1);
	    	Out.Col = Col_0;//float3(tubeUcoord0,0,0);
	    	// out id:
	//    	Out.tubeID = In[0].tubeID;
	    	//Out.info = In[0].info;
		    TriangleOutputStream.Append(Out);   
	    	
			// Point 1:
	    	// section extrusion:
		    pos = GetPosition(i,TubeShapeRes,Thickness1);
			// Orientation
	    	pos = mul(float4(pos,1), rot1).xyz;
	    	// get normal from pos before translating and offsetting it        	
		    Out.norm = normalize(pos);
	    	// scale factor:
	    	pos *= scaleFactor1;
	    	// final Position:
		    pos += pos1 + offsetVec1;
		    Out.pos = pos;//float4(pos, 1);
	     	Out.Col = Col_1;//float3(tubeUcoord1,0,0);
	   	// out id:
	//    	Out.tubeID = In[1].tubeID;
	    	//Out.info = In[1].info;
	
		    TriangleOutputStream.Append(Out);    	
	    }
		TriangleOutputStream.RestartStrip();
		
	
		
		// CAPS ========================================
		// BOTTOM ========================================
	
		//dir cull
		bool CapDirCull = dot(CullDir,-tang0) > 0; 
	
		for(int c=0; c<TubeShapeRes && tubeUcoord0==0 && CapDirCull; c++)
	    {
		    GS_OUTPUT Out; 	
		
	    	
		    // Point 0:
		    Out.pos = pos0 + offsetVec0;
	    	Out.norm = tang0;
	     	Out.Col = Col_0;//float3(tubeUcoord0,0,0);
	   	// out id:
	//    	Out.tubeID = In[1].tubeID;
	    	//Out.info = In[1].info;
		    TriangleOutputStream.Append(Out);    	
	    	
	        // Point 1:
		    float3 pos = GetPosition(c,TubeShapeRes,Thickness0*scaleFactor0);
	
	    	// Orientation
	    	pos = mul(float4(pos,1), rot0).xyz;
	    	// Offset from spline:
	    	//float3 offset = mul(float3(0,ThRoOf.z,0), rotate(pitchYaw.x, pitchYaw.y, ThRoOf.y));
	    	// get normal from pos before translating and offsetting it        	
		   // float3 norm = -tang0;//normalize(pos);
	    	// final Position:
		    pos += pos0 + offsetVec0;
		    Out.pos = pos;//float4(pos, 1);
		    TriangleOutputStream.Append(Out);   
	    	
		}
		TriangleOutputStream.RestartStrip();
	
	
		// TOP ========================================

		//dir cull
		CapDirCull = dot(CullDir, tang1) > 0; 

		for(int c2=0; c2<TubeShapeRes && tubeUcoord1==1 && CapDirCull; c2++)
	    {
		    GS_OUTPUT Out; 	
		    // Point 0:
	    	// section position:
		    float3 pos = GetPosition(c2,TubeShapeRes,Thickness1*scaleFactor1);
		   	// Orientation
	    	pos = mul(float4(pos,1), rot1).xyz;
	    	// Offset from spline:
	    	//float3 offset = mul(float3(0,ThRoOf.z,0), rotate(pitchYaw.x, pitchYaw.y, ThRoOf.y));
	    	// get normal from pos before translating and offsetting it        	
		    float3 norm = -tang1;//normalize(pos);
	    	// final Position:
		    pos += pos1 + offsetVec1;
		    Out.pos = pos;//float4(pos, 1);
	    	// final Normal:
	    	Out.norm = norm;
	    	Out.Col = Col_1;//float3(tubeUcoord1,0,0);
	    	// out id:
	//    	Out.tubeID = In[0].tubeID;
	    	//Out.info = In[0].info;
		    TriangleOutputStream.Append(Out);   
	    	
	    // Point 1:
		    Out.pos = pos1 + offsetVec1;
		    TriangleOutputStream.Append(Out);    	
		}
		TriangleOutputStream.RestartStrip();
	}
}


//==============================================================================
//==============================================================================
// TECHNIQUES ==================================================================
//==============================================================================
//==============================================================================

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS0() ), "POSITION.xyz;NORMAL.xyz;COLOR.xyz" );//;TEXCOORD0.x" );

technique11 flat
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetHullShader( CompileShader( hs_5_0, HS() ) );
		SetDomainShader( CompileShader( ds_5_0, DS() ) );
		SetGeometryShader( StreamOutGS );
	}
}

