
//==============================================================================
//==============================================================================
//PARAMETERS ===================================================================
//==============================================================================
//==============================================================================
#include <packs\dx11.particles\nodes\modules\Core\fxh\Core.fxh>

struct Particle {
	float4 Pos;		// float3 pos (default 0,0,0) + float rnd (random value in 0 to 1 space)
	float4 Vel;		// float3 vel (default 0,0,0) + float rnd (random value in 0 to 1 space)
	float4 Col;		// float3 col (default 1,1,1) + float lifeT (default 0)
	float4 RndDir;	// float3 random direction values (gaussian distribution) + float rnd (random value in 0 to 1 space)
	float4 Info;	// float heat (default 0) + float dynamic (default 0) + 0 + 0
};

StructuredBuffer<Particle> ParticleBuffer;

struct trace
{
	float3 pos;
	float bornTime;
	uint refIndex;
};
StructuredBuffer<trace> TracesBuffer;


//========================


cbuffer cb_Static : register( b0 )
{
	int TubeShapeRes = 7;
	int FilamentBuffer_BinSize = 4; // Ctrl Points per Filament
	int GeomPatch_BinSize = 1;
	float GeomPatch_BinSizeInv = 1;
	float LengthMult = 1;
	float2 TessFactor_DistMinMax = float2(100, 600);
	float2 TessFactor_MinMaxValue = float2(64, 2);
	float Stripes_NormLerp = 1;
	float DotCullingThresholdValue = 0.61;
	float4 Col_mapVel = float4(0,1,0,1);
}

cbuffer cb_RareUpdate : register( b1 )
{
	float2 FogMinMaxDist ;
	float Thickness = 0.1;
	float colMult = 1;
	float UcoordDeathValue = 1;
}

cbuffer cb_Dynamic : register( b2 )
{
	float4x4 Cull_tVInv : CULL_VIEWINVERSE ;
	float4x4 Cull_tVP : CULL_VIEWPROJECTION ;
	float4x4 Cull_tVPInv : CULL_VIEWPROJECTIONINVERSE ;
	float3 CullPos : CULL_POS;
	float3 CullDir : CULL_DIR;
	int RingBufferShift;
	float infraFrame_Cycle;
}

//StructuredBuffer<float4> CtrlPointsPosBuffer ;

//Texture2D ColUgradientTex <string uiname="Color Gradient Texture";>;
Texture2D ColRampTex <string uiname="Color Ramp Texture";>;
Texture1D CtrlTex <string uiname="CtrlTexture";>;
SamplerState s : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = clamp;
};

StructuredBuffer<float4> rndBuffer;

//==============================================================================
//==============================================================================
// FUNCTIONS ===================================================================
//==============================================================================
//==============================================================================

float DotCulling(float3 pos)
{
	float3 vec = pos - CullPos;
	float dotValue = dot(normalize(vec), CullDir);
	
	return dotValue > DotCullingThresholdValue;
}

// -----------------------------------------------------------------------------
// COLOR CONVERSION

float3 HUEtoRGB(in float H){
	H=frac(H);
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R,G,B));
}
float3 HSVtoRGB(in float3 HSV){
	float3 RGB = HUEtoRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 HSLtoRGB(in float3 HSL)
{
	float3 RGB = HUEtoRGB(HSL.x);
	float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
	return (RGB - 0.5) * C + HSL.z;
}
float3 RGBtoHSV(in float3 RGB){
	float3 HSV = 0;
	HSV.z = max(RGB.r, max(RGB.g, RGB.b));
	float M = min(RGB.r, min(RGB.g, RGB.b));
	float C = HSV.z - M;
	if (C != 0){
		float4 RGB0 = float4(RGB, 0);
		float4 Delta = (HSV.z - RGB0) / C;
		Delta.rgb -= Delta.brg;
		Delta.rgb += float3(2,4,6);
		Delta.brg = step(HSV.z, RGB) * Delta.brg;
		HSV.x = max(Delta.r, max(Delta.g, Delta.b));
		HSV.x = frac(HSV.x / 6);
		HSV.y = 1 / Delta.w;
	}
	return HSV;
}
float3 RGBtoHSL(in float3 RGB){
	float3 HSL = 0;
	float U, V;
	U = -min(RGB.r, min(RGB.g, RGB.b));
	V = max(RGB.r, max(RGB.g, RGB.b));
	HSL.z = (V - U) * 0.5;
	float C = V + U;
	if (C != 0){
		float3 Delta = (V - RGB) / C;
		Delta.rgb -= Delta.brg;
		Delta.rgb += float3(2,4,6);
		Delta.brg = step(V, RGB) * Delta.brg;
		HSL.x = max(Delta.r, max(Delta.g, Delta.b));
		HSL.x = frac(HSL.x / 6);
		HSL.y = C / (1 - abs(2 * HSL.z - 1));
	}
	return HSL;
}
//==============================================================================
//==============================================================================
// VERTEX SHADER ===============================================================
//==============================================================================
//==============================================================================

struct VS_IN
{
	uint iv : SV_VertexID ;
};

struct VS_OUTPUT
{
	float iv : TEXCOORD0 ;
	float TessFactor : TEXCOORD5 ;
	uint2 IDs : TEXCOORD3 ;
	float LocalUcoord : TEXCOORD1 ;
	float3 Col : COLOR ;
	float tubeLength : TEXCOORD2 ;
};

VS_OUTPUT VS(VS_IN In)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;
	
	Out.iv = In.iv;

	// Filament Index
	uint FilamentID = In.iv / GeomPatch_BinSize;
	
	uint pIndex = TracesBuffer[FilamentID*FilamentBuffer_BinSize].refIndex;
	bool alive = 1;//ParticleBuffer[pIndex].lifespan>0;
	
	// Patch ID in Segment Group
	uint PatchGroupID = In.iv % GeomPatch_BinSize;
	
	Out.IDs = uint2(FilamentID, PatchGroupID);
	
	// Filament U coord
	Out.LocalUcoord = PatchGroupID;//*0.9999;
	Out.LocalUcoord *= LengthMult * (rndBuffer[In.iv%256].x*0.9+0.1);
	Out.LocalUcoord -= infraFrame_Cycle;
		
	int2 CtrlPointsID = floor(Out.LocalUcoord) + int2(-1,2);
	CtrlPointsID = clamp(CtrlPointsID,0, FilamentBuffer_BinSize-1);
	int2 CtrlPointsIDBuffer = (CtrlPointsID+(uint)RingBufferShift)%FilamentBuffer_BinSize + (FilamentID*FilamentBuffer_BinSize);// + PingPongShift;

	// Filament Start-End Buffer Ctrl Points Indices
	uint A_index = FilamentID*FilamentBuffer_BinSize + RingBufferShift;
	uint B_index = FilamentID*FilamentBuffer_BinSize + (FilamentBuffer_BinSize-1+(uint)RingBufferShift)%FilamentBuffer_BinSize;
	
	// Filament Start-End Buffer Ctrl Points PosW
	float3 CtrlA_Pos = TracesBuffer[A_index].pos;
	float3 CtrlB_Pos = TracesBuffer[B_index].pos;
	
		
	// VIEW CULL
	float3 vecA = CtrlA_Pos - CullPos;
	float3 vecB = CtrlB_Pos - CullPos;
	float dotValueA = dot(normalize(vecA), CullDir);
	float dotValueB = dot(normalize(vecB), CullDir);	
	bool Cull_ViewDot = 1;//(dotValueA>DotCullingThresholdValue) || (dotValueB>DotCullingThresholdValue);

	float2 uv = 0;//ParticlesBuffer[In.iv].Ucoord;
	
	//if(Cull_ViewDot && uv.x<UcoordDeathValue)
	if(alive)
	{			
		// BEND TASSELLATION FACTOR

		
		// DISTANCE TESSELLATION FACTOR
		float MeanDist = distance((CtrlA_Pos+CtrlB_Pos)*0.5, CullPos);
	
		float distFactor = smoothstep(TessFactor_DistMinMax.x, TessFactor_DistMinMax.y, MeanDist);
		distFactor = pow(distFactor, 2);
		distFactor = lerp(TessFactor_MinMaxValue.x, TessFactor_MinMaxValue.y, distFactor);
		
		// CULL FAR
		bool Cull_Far = MeanDist < FogMinMaxDist.y;
		
		// FINAL CULL
		bool Cull = 1;//Cull_ViewDot && Cull_Far;// && Cull_MinMaxLength;

		
		float2 mappedUV = uv;
		mappedUV.x = CtrlTex.SampleLevel(s, mappedUV.x, 0).x;
		mappedUV.x = lerp(mappedUV.x*0.5, 3, pow(abs(uv.x),100));
		float3 Col = ColRampTex.SampleLevel(s, mappedUV.yx, 0).xyz;//c1.w;//lerp(ColRampTex.SampleLevel(s, Out.NormalizedUcoord, 0).xyz,ColRampTex2.SampleLevel(s, Out.NormalizedUcoord, 0).xyz, pow(saturate(z*height*gamma),gamma));
		
		Out.TessFactor =  distFactor * (float)Cull ;

		float velComponent = length(ParticleBuffer[pIndex].Vel);
		velComponent = smoothstep(Col_mapVel.x,Col_mapVel.y,velComponent);
		velComponent = lerp(Col_mapVel.z,Col_mapVel.w,velComponent);
		
		float rootFog = smoothstep(-250,0,CtrlA_Pos.z);
		
		Out.Col = Col * velComponent * rootFog * colMult;
		
		//Out.Col = ColRampTex.SampleLevel(s, CtrlB_Pos.w, 0).xyz;//c1.w;//lerp(ColRampTex.SampleLevel(s, Out.NormalizedUcoord, 0).xyz,ColRampTex2.SampleLevel(s, Out.NormalizedUcoord, 0).xyz, pow(saturate(z*height*gamma),gamma));
		Out.Col *= (rndBuffer[FilamentID%256].xwz*0.5+.75);// * (rndBuffer[FilamentID].y*0.5+0.5);
		//Out.Col = ParticleBuffer[pIndex].color.rgb;
				
		Out.tubeLength = 1 ;
	}
    return Out;
}

//==============================================================================
//==============================================================================
// HULL SHADER =================================================================
//==============================================================================
//==============================================================================

struct HS_CONSTANT_OUTPUT
{
    float edges[2] : SV_TessFactor ;
};

HS_CONSTANT_OUTPUT HSConst(int pID : SV_PrimitiveID, InputPatch<VS_OUTPUT, 1> In)
{
    HS_CONSTANT_OUTPUT Out;
	Out.edges[0] = 1;
    Out.edges[1] = In[0].TessFactor;
    return Out;
}

//==============================================================================

struct HS_OUTPUT
{
	float iv : TEXCOORD0 ;
	uint2 IDs : TEXCOORD3 ;
	float LocalUcoord : TEXCOORD1 ;
	float3 Col : COLOR ;
	float tubeLength : TEXCOORD2 ;
};

[domain("isoline")]
// "integer" / "fractional_even" / "fractional_odd"
[partitioning("fractional_odd")]
[outputtopology("line")]
[outputcontrolpoints(1)]
[patchconstantfunc("HSConst")]
HS_OUTPUT HS(InputPatch<VS_OUTPUT,1 > ip, uint id : SV_OutputControlPointID)
{
    HS_OUTPUT Out;
	Out.iv = ip[id].iv;
	Out.IDs = ip[id].IDs;
	Out.LocalUcoord = ip[id].LocalUcoord;
	Out.Col = ip[id].Col;
	Out.tubeLength = ip[id].tubeLength;
	
    return Out;
}

//==============================================================================
//==============================================================================
// DOMAIN SHADER: ==============================================================
//==============================================================================
//==============================================================================

// FUNCTIONS:

//---- B-Spline ----------------------------------------------------------------
struct pota { float3 Pos; float3 Tang; };
pota BSplineCubic(float3 p1, float3 p2, float3 p3, float3 p4, float range) {
	pota Out = (pota)0;
    float mu = frac(range);
   	float3 a0 = p4 - p3*3 + p2*3 - p1;
   	float3 a1 = p3*3 - p2*6 + p1*3.;
	float3 a2 = p3*3 - p1*3;
   	float3 a3 = p3 + p2*4 + p1;
	Out.Pos = (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
	Out.Tang = (mu*(2*a0*mu+a1)+mu*(a0*mu+a1)+a2)/6.;
	return Out;
}

//==============================================================================
//==============================================================================

struct DS_OUTPUT
{
    float3 position : POSITION ;
	float3 tangent : TEXCOORD2 ;
	float Thickness : TEXCOORD3 ; //thickness
	uint tubeID : TEXCOORD0 ;
	float NormalizedUcoord : TEXCOORD1 ;
	float3 Col : COLOR ;
};

[domain("isoline")]
DS_OUTPUT DS(HS_CONSTANT_OUTPUT input, OutputPatch<HS_OUTPUT, 1> op, float2 uv : SV_DomainLocation)
{
    DS_OUTPUT Out;
	
	// Filament Index
	uint FilamentID = op[0].IDs.x;
	
	// Patch ID in Segment Group
	uint PatchGroupID = op[0].IDs.y;
	
	// Normalized U Coord
	Out.NormalizedUcoord = (PatchGroupID + uv.x) * GeomPatch_BinSizeInv;
	
	// Filament U coord
	float LocalUcoord = op[0].LocalUcoord;
	// Start Filament Ctrl Point offset:
	//test += 1;
	
	float tessUcoord = uv.x * op[0].tubeLength * LengthMult * (rndBuffer[FilamentID%256].x*0.666+0.333);

	int4 CtrlPointsID = floor(LocalUcoord + tessUcoord) + int4(-1,0,1,2);
	CtrlPointsID = clamp(CtrlPointsID,0, FilamentBuffer_BinSize-1);
	int4 CtrlPointsIDBuffer = (CtrlPointsID+(uint)RingBufferShift)%FilamentBuffer_BinSize + (FilamentID*FilamentBuffer_BinSize);
	
	
	float3 c1 = TracesBuffer[CtrlPointsIDBuffer.x].pos;
	float3 c2 = TracesBuffer[CtrlPointsIDBuffer.y].pos;
	float3 c3 = TracesBuffer[CtrlPointsIDBuffer.z].pos;
	float3 c4 = TracesBuffer[CtrlPointsIDBuffer.w].pos;

	float BSplineCubicUcoord = op[0].LocalUcoord + tessUcoord;
	pota curve = BSplineCubic(c1,c2,c3,c4, BSplineCubicUcoord);

    Out.position = curve.Pos;
	Out.tangent = -normalize(curve.Tang);
	
	// Closeup FadeOut:
	float CloseFade = saturate(distance(curve.Pos, CullPos)*0.02-0.4);
	Out.Thickness = Thickness * (rndBuffer[FilamentID%256].y*0.5+0.5) * CloseFade;

	Out.tubeID = FilamentID;
	float z = Out.position.z ; 
	float selfGradient = pow(1-Out.NormalizedUcoord, 4);
	Out.Col = op[0].Col;
//	Out.Col *= selfGradient * 0.5 +0.5;
//	Out.Col += selfGradient * 0.35;
	
	return Out;
}

//==============================================================================
//==============================================================================
// GEOMETRY SHADER: ============================================================
//==============================================================================
//==============================================================================

// FUNCTIONS:

//#define minTwoPi 		-6.283185307179586476925286766559
//#define invMinTwoPi		-0.15915494309189533576888376337251
#define TwoPi 			6.283185307179586476925286766559
#define invTwoPi		0.15915494309189533576888376337251
//#define Pi 				3.1415926535897932384626433832795
//#define invPi 			0.31830988618379067153776752674503

// CONVERT FROM CARTESIAN TO POLAR COORDINATES (vector must be normalized):
float3 polar(float3 vec)
{	return float3(	asin(vec.y)*invTwoPi, 
					atan2(-vec.x, -vec.z)*invTwoPi, 
					0 ); }

// GENERATE ROTATE MATRIX:
float4x4 rotate(float Pitch,
		 float Yaw, 
		 float Roll)
  {
   Pitch *= TwoPi;
   Yaw *= TwoPi;
   Roll *= TwoPi;
   float sx = sin(Pitch);
   float cx = cos(Pitch);
   float sy = sin(Yaw);
   float cy = cos(Yaw);
   float sz = sin(Roll);
   float cz = cos(Roll);
   return float4x4( cz * cy + sz * sx * sy, sz * cx, cz * -sy + sz * sx * cy , 0,
                   -sz * cy + cz * sx * sy, cz * cx, sz *  sy + cz * sx * cy , 0,
                    cx * sy				  ,-sx     , cx * cy                 , 0,
                    0                     , 0      , 0                       , 1);
  }

// GET CIRCLE POSITION:
float3 GetPosition(int i,int tot,float radius)
{
	float s = (float)i / ((float) tot - 1.0f) * 6.2918;
	float3 res;
	res.x = sin(s) * radius;
	res.y = cos(s) * radius;
	res.z = 0.0f;
	return res;
}


//==============================================================================
//==============================================================================
//==============================================================================

struct GS_OUTPUT
{
	float4 pos : POSITION ;
	float3 norm : NORMAL ;
	float4 Col : TEXCOORD0 ;
};

float2 InAndOutScaleFactor;

[maxvertexcount(36)]
void GS_Tubes(line DS_OUTPUT In[2], inout TriangleStream<GS_OUTPUT> TriangleOutputStream)
{
    float3 pos0 = In[0].position;
    float3 pos1 = In[1].position;
	float3 PosMean = (pos0.xyz + pos1.xyz)*0.5;
    float3 tang0 = In[0].tangent;
    float3 tang1 = In[1].tangent;	
	
	float scaleFactor0 = 1;
	float scaleFactor1 = 1;
	
	float3 pitchYaw0 = polar(tang0);
	float3 pitchYaw1 = polar(tang1);
	float4x4 rot0 = rotate(pitchYaw0.x, pitchYaw0.y, 0);
	float4x4 rot1 = rotate(pitchYaw1.x, pitchYaw1.y, 0);
		
	float Thickness0 = In[0].Thickness;
	float Thickness1 = In[1].Thickness;
	float tubeUcoord0 = In[0].NormalizedUcoord;
	float tubeUcoord1 = In[1].NormalizedUcoord;
	
	float3 Col_0 = In[0].Col;
	float3 Col_1 = In[1].Col;
	

    for(int i=0; i<TubeShapeRes; i++)
    {
	    GS_OUTPUT Out; 	
	    // Point 0:
    	// section extrusion:
	    float3 pos = GetPosition(i,TubeShapeRes,Thickness0);
    	// Orientation
    	pos = mul(float4(pos,1), rot0).xyz;
     	// get normal from pos before translating and offsetting it        	
	    Out.norm = normalize(pos);
    	// scale factor:
    	pos *= scaleFactor0;
    	// final Position:
	    pos += pos0;
	    Out.pos = float4(pos, 1);
    	Out.Col = float4(Col_0, 1);//float3(tubeUcoord0,0,0);
	    TriangleOutputStream.Append(Out);   
    	
		// Point 1:
    	// section extrusion:
	    pos = GetPosition(i,TubeShapeRes,Thickness1);
		// Orientation
    	pos = mul(float4(pos,1), rot1).xyz;
    	// get normal from pos before translating and offsetting it        	
	    Out.norm = normalize(pos);
    	// scale factor:
    	pos *= scaleFactor1;
    	// final Position:
	    pos += pos1;
	    Out.pos = float4(pos, 1);
    	Out.Col = float4(Col_1, 1);//float3(tubeUcoord0,0,0);
	    TriangleOutputStream.Append(Out);    	
    }
	TriangleOutputStream.RestartStrip();
	

	// CAPS ========================================
	// BOTTOM ========================================

	//dir cull
	bool CapDirCull = dot(CullDir,-tang0) > 0;

	for(int c=0; c<TubeShapeRes && tubeUcoord0==0 && CapDirCull; c++)
    {
	    GS_OUTPUT Out; 	
	
    	
	    // Point 0:
	    Out.pos = float4(pos0, 1);
    	Out.norm = tang0;
    	Out.Col = float4(Col_0, 1);//float3(tubeUcoord0,0,0);
	    TriangleOutputStream.Append(Out);    	
    	
        // Point 1:
	    float3 pos = GetPosition(c,TubeShapeRes,Thickness0*scaleFactor0);

    	// Orientation
    	pos = mul(float4(pos,1), rot0).xyz;
	    pos += pos0;
	    Out.pos = float4(pos, 1);
	    TriangleOutputStream.Append(Out);   
    	
	}
	TriangleOutputStream.RestartStrip();


	// TOP ========================================

	//dir cull
	CapDirCull = dot(CullDir, tang1) > 0;

	for(int c2=0; c2<TubeShapeRes && tubeUcoord1>0.99 && CapDirCull; c2++)
    {
	    GS_OUTPUT Out; 	
	    // Point 0:
    	// section position:
	    float3 pos = GetPosition(c2,TubeShapeRes,Thickness1*scaleFactor1);
	   	// Orientation
    	pos = mul(float4(pos,1), rot1).xyz;
	    float3 norm = -tang1;//normalize(pos);
    	// final Position:
	    pos += pos1;
	    Out.pos = float4(pos, 1);
    	// final Normal:
    	Out.norm = norm;
    	Out.Col = float4(Col_1, 1);
	    TriangleOutputStream.Append(Out);   
    	
    // Point 1:
	    Out.pos = float4(pos1, 1);
	    TriangleOutputStream.Append(Out);    	
	}
	TriangleOutputStream.RestartStrip();
}

// -----------------------------------------------------------------------------


[maxvertexcount(4)]
void GS_Stripes(line DS_OUTPUT In[2], inout TriangleStream<GS_OUTPUT> gsout)
{
	GS_OUTPUT Out;
	
	float3 Col_0 = In[0].Col;
	float3 Col_1 = In[1].Col;
	
	// ORIGINAL POSITION
	float3 p0_w = In[0].position;
	float3 p1_w = In[1].position;
	
	// ORIGINAL DIRECTION	
    float3 tang0_w = In[0].tangent;
    float3 tang1_w = In[1].tangent;	
	
	// PROJECTION POINTS FROM DIRECTION:
	float3 proj0_w = p0_w + tang0_w;
	float3 proj1_w = p1_w + tang1_w;
	
	// WORDVIEWPROJECTION POSITION
	float4 p0 = mul(float4(p0_w,1), Cull_tVP);
	float4 p1 = mul(float4(p1_w,1), Cull_tVP);
	float4 proj0 = mul(float4(proj0_w,1), Cull_tVP);
	float4 proj1 = mul(float4(proj1_w,1), Cull_tVP);
	
	// SCREEN POSITION
	float2 p0_screen = p0.xy / p0.w;
	float2 p1_screen = p1.xy / p1.w;
	float2 proj0_screen = proj0.xy / proj0.w;
	float2 proj1_screen = proj1.xy / proj1.w;


	// SCREENSPACE DIRECTION
	float2 v0_screen = normalize(proj0_screen - p0_screen);
	float2 v1_screen = normalize(proj1_screen - p1_screen);
	
	// SCREENSPACE NORMALS
	float2 n0 = float2(-v0_screen.y, v0_screen.x);
	float2 n1 = float2(-v1_screen.y, v1_screen.x);

	
	float3 addNorm = mul(float4(0,0,-.5,0),Cull_tVInv).xyz;
	
	Out.pos = mul(float4((p0.xy + n0*In[0].Thickness), p0.zw ),Cull_tVPInv);
	Out.norm = lerp(tang0_w, Out.pos.xyz - p0_w + addNorm, Stripes_NormLerp);
	Out.Col = float4(Col_0, 1);
	gsout.Append(Out);
	
//	Out.pos = mul(float4((p0.xy - n0*In[0].Thickness), p0.zw ),Cull_tVPInv);
//	Out.norm = lerp(tang0_w, Out.pos.xyz - p0_w + addNorm, Stripes_NormLerp);
//	Out.Col = float4(Col_0, 1);
	gsout.Append(Out);
	
	Out.pos = mul(float4((p1.xy + n1*In[1].Thickness), p1.zw ),Cull_tVPInv);
	Out.norm = lerp(tang1_w, Out.pos.xyz - p1_w + addNorm, Stripes_NormLerp);
	Out.Col = float4(Col_1, 1);
	gsout.Append(Out);
	
//	Out.pos = mul(float4((p1.xy - n1*In[1].Thickness), p1.zw ),Cull_tVPInv);
//	Out.norm = lerp(tang1_w, Out.pos.xyz - p1_w + addNorm, Stripes_NormLerp);
//	Out.Col = float4(Col_1, 1);
	gsout.Append(Out);
	
	gsout.RestartStrip();	
}

// -----------------------------------------------------------------------------
[maxvertexcount(2)]
void GS_Lines(line DS_OUTPUT In[2], inout LineStream<GS_OUTPUT> LineOutputStream)
{
    float3 pos0 = In[0].position;
    float3 pos1 = In[1].position;
    float3 tang0 = In[0].tangent;
    float3 tang1 = In[1].tangent;	
	
	float3 Col_0 = In[0].Col;
	float3 Col_1 = In[1].Col;
	

    GS_OUTPUT Out; 	

	// Point 0:
	Out.pos = float4(pos0, 1);
	Out.Col = float4(Col_0, 1);	//float3(tubeUcoord0,0,0);
	Out.norm = tang0;
	LineOutputStream.Append(Out);   
	    	
	// Point 1:
	Out.pos = float4(pos1, 1);
	Out.Col = float4(Col_1, 1);	//float3(tubeUcoord0,0,0);
	Out.norm = tang1;
	LineOutputStream.Append(Out);   

	LineOutputStream.RestartStrip();
		
	
}

//==============================================================================
//==============================================================================
// TECHNIQUES ==================================================================
//==============================================================================
//==============================================================================

GeometryShader StreamOutGS_Tubes = ConstructGSWithSO( CompileShader( gs_5_0, GS_Tubes() ), "POSITION.xyzw;NORMAL.xyz;TEXCOORD0.xyzw" );

technique11 Tubes
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetHullShader( CompileShader( hs_5_0, HS() ) );
		SetDomainShader( CompileShader( ds_5_0, DS() ) );
		SetGeometryShader( StreamOutGS_Tubes );
	}
}


GeometryShader StreamOutGS_Stripes = ConstructGSWithSO( CompileShader( gs_5_0, GS_Stripes() ), "POSITION.xyzw;NORMAL.xyz;TEXCOORD0.xyzw" );

technique11 Stripes
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetHullShader( CompileShader( hs_5_0, HS() ) );
		SetDomainShader( CompileShader( ds_5_0, DS() ) );
		SetGeometryShader( StreamOutGS_Stripes );
	}
}


GeometryShader StreamOutGS_Lines = ConstructGSWithSO( CompileShader( gs_5_0, GS_Lines() ), "POSITION.xyzw;NORMAL.xyz;TEXCOORD0.xyzw" );

technique11 Lines
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetHullShader( CompileShader( hs_5_0, HS() ) );
		SetDomainShader( CompileShader( ds_5_0, DS() ) );
		SetGeometryShader( StreamOutGS_Lines );
	}
}

