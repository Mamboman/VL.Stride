
//==============================================================================
//==============================================================================
//PARAMETERS ===================================================================
//==============================================================================
//==============================================================================

#define PATCHCTRLPOINTSCOUNT 1

//---------------------------------


int TubeShapeRes = 7;
float TessFactor = 1;

int FilamentCount = 1;
int FilamentBuffer_BinSize = 4; // Ctrl Points per Filament
float FilamentBuffer_BinSizeInv = 1;
int GeomPatch_BinSize = 1;
float GeomPatch_BinSizeInv = 1;

float3 CullPos : CULL_POS;
float3 CullDir : CULL_DIR;

float Thickness = 0.1;

StructuredBuffer<float3> CtrlPointsPosBuffer ;
StructuredBuffer<float4> CtrlPointsVecBendBuffer ;
//StructuredBuffer<float3> CtrlPointsBuffer ;
bool PingPong;
float infraframe_Shift;
float infraFrame_Cycle;

Texture1D ColRampTex <string uiname="Color Ramp Texture";>;
SamplerState s : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
};

//==============================================================================
//==============================================================================
// FUNCTIONS ===================================================================
//==============================================================================
//==============================================================================

float DotCullingThresholdValue = 0.61;
float DotCulling(float3 pos)
{
	float3 vec = pos - CullPos;
	float dotValue = dot(normalize(vec), CullDir);
	
	return dotValue > DotCullingThresholdValue;
}

float DotDistCulling_CullDistance = 10;
float DotDistCulling(float3 pos)
{
	float3 vec = pos - CullPos;
	float dotValue = dot(normalize(vec), CullDir);
	
	return (dotValue>DotCullingThresholdValue) && dot(vec,vec)<(DotDistCulling_CullDistance*DotDistCulling_CullDistance);
}

/*
float Culling(float3 pos)
{
	float4 projected = mul(float4(pos, 1), tVP);
	
	projected.xyz /= projected.w;
	
	float result = 0;
	
	if(	all(projected.xy > -1.1) && 
		all(projected.xy < 1.1) && 
		projected.z > 0 && 
		projected.z < 1)
	{
		result = 1;
	}
	
	return result;
}
*/

//==============================================================================
//==============================================================================
// VERTEX SHADER ===============================================================
//==============================================================================
//==============================================================================

struct VS_IN
{
	uint iv : SV_VertexID ;
};

struct VS_OUTPUT
{
	float iv : TEXCOORD0 ;
	//uint FilamentID : TEXCOORD1 ;
	uint2 CtrlAB_Index : TEXCOORD2 ;
	bool Cull : TEXCOORD3 ;
	float MeanDist : TEXCOORD4 ;
	float TessFactor : TEXCOORD5 ;
};

VS_OUTPUT VS(VS_IN In)
{
    VS_OUTPUT Out;
	
	Out.iv = In.iv;

	uint PingPongShift = PingPong * (FilamentCount*FilamentBuffer_BinSize);
	
	// Filament Index
	uint FilamentID = In.iv / GeomPatch_BinSize;

	// Filament Start-End Buffer Ctrl Points Indices
	Out.CtrlAB_Index = uint2(FilamentID*FilamentBuffer_BinSize, FilamentID*FilamentBuffer_BinSize + (FilamentBuffer_BinSize-1));
	
	
	
	// Filament Start-End Buffer Ctrl Points PosW
	float3 CtrlA_Pos = CtrlPointsPosBuffer[Out.CtrlAB_Index.x + PingPongShift];
	float3 CtrlB_Pos = CtrlPointsPosBuffer[Out.CtrlAB_Index.y + PingPongShift];
	
	Out.Cull = 1;//DotDistCulling(CtrlA.Pos) || DotDistCulling(CtrlB.Pos);
	
	Out.MeanDist = distance((CtrlA_Pos+CtrlB_Pos)*0.5, CullPos);
	
	// Patch Bend Factor:
	uint index = FilamentID*FilamentBuffer_BinSize + (In.iv%GeomPatch_BinSize)*FilamentBuffer_BinSize;
	float4 VecBendA = CtrlPointsVecBendBuffer[In.iv];
	float4 VecBendB = CtrlPointsVecBendBuffer[In.iv+1];
	
	float BendFactor = pow((VecBendA.w + VecBendB.w) * 0.5, 0.5);
	float DistFactor = length(VecBendA);
	
	Out.TessFactor = BendFactor * DistFactor * TessFactor;

    return Out;
}

//==============================================================================
//==============================================================================
// HULL SHADER =================================================================
//==============================================================================
//==============================================================================

float2 TessFactor_DistMinMax = float2(100, 600);
float2 TessFactor_MinMaxValue = float2(64, 2);

struct HS_CONSTANT_OUTPUT
{
    float edges[2] : SV_TessFactor ;
	//uint FilamentID : TEXCOORD1 ;
	uint2 CtrlAB_Index : TEXCOORD2 ;
	float TessFactor : TEXCOORD5 ;
};

struct HS_OUTPUT
{
	float iv : TEXCOORD0 ;
	//uint FilamentID : TEXCOORD1 ;
	uint2 CtrlAB_Index : TEXCOORD2 ;
	float BendFactor : TEXCOORD5 ;
};

HS_CONSTANT_OUTPUT HSConst(int pID : SV_PrimitiveID, InputPatch<VS_OUTPUT, PATCHCTRLPOINTSCOUNT> In)
{
    HS_CONSTANT_OUTPUT Out;
	
	uint tubeID = (uint)pID / FilamentBuffer_BinSize;
	float tubeLength = 1;//SplineData[tubeID].length;
	
	float distFactor = smoothstep(TessFactor_DistMinMax.x, TessFactor_DistMinMax.y, In[0].MeanDist);
	distFactor = pow(distFactor, 2);
	distFactor = lerp(TessFactor_MinMaxValue.x, TessFactor_MinMaxValue.y, distFactor);
	
	float tessFactor = 1;
    Out.edges[0] = 1;//In[0].TessFactor;//1.0f * In[0].Cull;// Detail factor (see below for explanation)
    Out.edges[1] = 1;//In[0].TessFactor;//tubeLength  * distFactor * In[0].Cull;//SplineData[tubeID].tessFactor;//8.0f; // Density factor
	//Out.FilamentID = In[0].FilamentID;
	Out.CtrlAB_Index = In[0].CtrlAB_Index;
	Out.TessFactor = In[0].TessFactor;

    return Out;
}

[domain("isoline")]
// "integer" / "fractional_even" / "fractional_odd"
[partitioning("fractional_odd")]
[outputtopology("line")]
[outputcontrolpoints(PATCHCTRLPOINTSCOUNT)]
[patchconstantfunc("HSConst")]
HS_OUTPUT HS(InputPatch<VS_OUTPUT,PATCHCTRLPOINTSCOUNT > ip, uint id : SV_OutputControlPointID)
{
    HS_OUTPUT Out;
	Out.iv = ip[id].iv;
	//Out.FilamentID = ip[id].FilamentID;
	Out.CtrlAB_Index = ip[id].CtrlAB_Index;
	Out.BendFactor = ip[id].TessFactor;
    return Out;
}

//==============================================================================
//==============================================================================
// DOMAIN SHADER: ==============================================================
//==============================================================================
//==============================================================================

// FUNCTIONS:

//---- B-Spline ----------------------------------------------------------------
struct pota { float3 Pos; float3 Tang; };
pota BSplineCubic(float3 p1, float3 p2, float3 p3, float3 p4, float range) {
	pota Out = (pota)0;
    float mu = frac(range);
   	float3 a0 = p4 - p3*3 + p2*3 - p1;
   	float3 a1 = p3*3 - p2*6 + p1*3.;
	float3 a2 = p3*3 - p1*3;
   	float3 a3 = p3 + p2*4 + p1;
	Out.Pos = (a3+mu*(a2+mu*(a1+mu*a0)))/6.;
	Out.Tang = (mu*(2*a0*mu+a1)+mu*(a0*mu+a1)+a2)/6.;
	return Out;
}

//==============================================================================
//==============================================================================

struct DS_OUTPUT
{
    float3 position : POSITION ;
	float3 tangent : TEXCOORD2 ;
	//float3 ThRoOf : TEXCOORD3 ; //thickness roll offset
	float Thickness : TEXCOORD3 ; //thickness
	uint tubeID : TEXCOORD0 ;
	float FilamentUcoord : TEXCOORD1 ;
	float3 Col : COLOR ;
//	float SplineUpos : TEXCOORD4 ;
	//float4 info : TEXCOORD0 ; // spline ID, tube ID, thickness
};

float lengthMult = 1;
float lengthShift = 0;

[domain("isoline")]
DS_OUTPUT DS(HS_CONSTANT_OUTPUT input, OutputPatch<HS_OUTPUT, 1> op, float2 uv : SV_DomainLocation)
{
    DS_OUTPUT Out;
	
		infraframe_Shift;
		infraFrame_Cycle;

	uint PingPongShift = PingPong * (FilamentCount*FilamentBuffer_BinSize);

	Out.Col = op[0].BendFactor;
	
	// Patch Level:
	
	// Filament Index
	uint FilamentID = op[0].iv / GeomPatch_BinSize;
	//uint FilamentID = op[0].FilamentID;
	
	// Patch ID in Segment Group
	uint PatchGroupID = op[0].iv % GeomPatch_BinSize;
	
	// Patch U Coord
	Out.FilamentUcoord = (uv.x*0.9999+PatchGroupID) * (GeomPatch_BinSizeInv);
	Out.FilamentUcoord *= lengthMult;// * (1-GeomPatch_BinSizeInv);
	//Out.FilamentUcoord += lengthShift;

	// InfraFrame Shift:
//	Out.FilamentUcoord = Out.FilamentUcoord + (1-infraFrame_Cycle)*infraframe_Shift;


	// Patch Segment ID in Filament Group
	uint PatchSegmGroupID = floor(Out.FilamentUcoord*(FilamentBuffer_BinSize));
	
	uint2 Bounds_ID = op[0].CtrlAB_Index;
	
//	int startctrl = FilamentID * splRes;
//	int endctrl = startctrl + splRes -1;

	uint FilamentCtrlPoint = PatchSegmGroupID + Bounds_ID.x;
	
	int4 CtrlPointsID = PatchSegmGroupID + int4(-1,0,1,2);
	int4 CtrlPointsIDClamped = clamp(CtrlPointsID, 0, FilamentBuffer_BinSize-1);
	int4 CtrlPointsIDBuffer = CtrlPointsIDClamped + (FilamentID*FilamentBuffer_BinSize) + PingPongShift;
	
	// Outbounds Ctrl Points displacement projection:
	int4 OutBoundDir = min(OutBoundDir,0) + (max(OutBoundDir,FilamentBuffer_BinSize)-FilamentBuffer_BinSize);
		
	float3 c1 = CtrlPointsPosBuffer[CtrlPointsIDBuffer.x];
	float3 c2 = CtrlPointsPosBuffer[CtrlPointsIDBuffer.y];
	float3 c3 = CtrlPointsPosBuffer[CtrlPointsIDBuffer.z];
	float3 c4 = CtrlPointsPosBuffer[CtrlPointsIDBuffer.w];

	pota curve = BSplineCubic(c1,c2,c3,c4,Out.FilamentUcoord*FilamentBuffer_BinSize);
	
    Out.position = curve.Pos;
	Out.tangent = -normalize(curve.Tang);	
/*	Out.ThRoOf = float3(	SplineData[tubeID].thickness,
							RollOffset[tubeID].x,
							RollOffset[tubeID].y);
*/
	Out.Thickness = Thickness;

	Out.tubeID = FilamentID;
	//output.info = float4(FilamentID, tubeID, output.ThRoOf.x, t);// sidx/ CtrlPS);
	
    return Out;
}

//==============================================================================
//==============================================================================
// GEOMETRY SHADER: ============================================================
//==============================================================================
//==============================================================================

// FUNCTIONS:

#define minTwoPi 		-6.283185307179586476925286766559
#define invMinTwoPi		-0.15915494309189533576888376337251
#define TwoPi 			6.283185307179586476925286766559
#define invTwoPi		0.15915494309189533576888376337251
#define Pi 				3.1415926535897932384626433832795
#define invPi 			0.31830988618379067153776752674503

// CONVERT FROM CARTESIAN TO POLAR COORDINATES (vector must be normalized):
float3 polar(float3 vec)
{	return float3(	asin(vec.y)*invTwoPi, 
					atan2(-vec.x, -vec.z)*invTwoPi, 
					0 ); }

// GENERATE ROTATE MATRIX:
float4x4 rotate(float Pitch,
		 float Yaw, 
		 float Roll)
  {
   Pitch *= TwoPi;
   Yaw *= TwoPi;
   Roll *= TwoPi;
   float sx = sin(Pitch);
   float cx = cos(Pitch);
   float sy = sin(Yaw);
   float cy = cos(Yaw);
   float sz = sin(Roll);
   float cz = cos(Roll);
   return float4x4( cz * cy + sz * sx * sy, sz * cx, cz * -sy + sz * sx * cy , 0,
                   -sz * cy + cz * sx * sy, cz * cx, sz *  sy + cz * sx * cy , 0,
                    cx * sy				  ,-sx     , cx * cy                 , 0,
                    0                     , 0      , 0                       , 1);
  }

// GET CIRCLE POSITION:
float3 GetPosition(int i,int tot,float radius)
{
	float s = (float)i / ((float) tot - 1.0f) * 6.2918;
	float3 res;
	res.x = sin(s) * radius;
	res.y = cos(s) * radius;
	res.z = 0.0f;
	return res;
}


//==============================================================================
//==============================================================================
//==============================================================================

struct GS_OUTPUT
{
	float3 pos : POSITION ;
	float3 norm : NORMAL ;
	float3 Col : COLOR ;
//	uint tubeID : TEXCOORD0 ;
	//float4 info : TEXCOORD0 ;
};

float2 InAndOutScaleFactor;

[maxvertexcount(36)]
void GS_Tubes(line DS_OUTPUT In[2], inout TriangleStream<GS_OUTPUT> TriangleOutputStream)
{
    float3 pos0 = In[0].position;
    float3 pos1 = In[1].position;
	float3 PosMean = (pos0.xyz + pos1.xyz)*0.5;
    float3 tang0 = In[0].tangent;
    float3 tang1 = In[1].tangent;	
	
	float SplineUpos0 = In[0].FilamentUcoord;
	float SplineUpos1 = In[1].FilamentUcoord;
	float scaleFactor0 = 1;// smoothstep(0,InAndOutScaleFactor.x, SplineUpos0);
	//scaleFactor0 *= smoothstep(1,1-InAndOutScaleFactor.y, SplineUpos0);
	float scaleFactor1 = 1;//smoothstep(0,InAndOutScaleFactor.x, SplineUpos1);
	//scaleFactor1 *= smoothstep(1,1-InAndOutScaleFactor.y, SplineUpos1);
	
	float3 pitchYaw0 = polar(tang0);
	float3 pitchYaw1 = polar(tang1);
	float4x4 rot0 = rotate(pitchYaw0.x, pitchYaw0.y, 0);
	float4x4 rot1 = rotate(pitchYaw1.x, pitchYaw1.y, 0);
	
	float3 offsetVec0 = 0; //mul(float3(rndOffset[In[0].tubeID],0), (float3x3)rot0).xyz;
	float3 offsetVec1 = 0; //mul(float3(rndOffset[In[1].tubeID],0), (float3x3)rot1).xyz;
	
	float Thickness0 = In[0].Thickness;
	float Thickness1 = In[1].Thickness;
	float tubeUcoord0 = In[0].FilamentUcoord;
	float tubeUcoord1 = In[1].FilamentUcoord;
	
	
	float3 Col_0 = ColRampTex.SampleLevel(s, SplineUpos0, 0).xyz;
	float3 Col_1 = ColRampTex.SampleLevel(s, SplineUpos1, 0).xyz;
	
/*
	float DistDynRes = smoothstep(DistDynamicRes.x, DistDynamicRes.y, distance(PosMean, cullPos));
	DistDynRes = lerp(DistDynamicRes.z, DistDynamicRes.w, DistDynRes);
*/	
	float Cull = 1;//Culling(PosMean);

	if(Cull && (scaleFactor0>0 || scaleFactor1>0))
	{
	    for(int i=0; i<TubeShapeRes; i++)
	    {
		    GS_OUTPUT Out; 	
		    // Point 0:
	    	// section extrusion:
		    float3 pos = GetPosition(i,TubeShapeRes,Thickness0);
	    	// Orientation
	    	pos = mul(float4(pos,1), rot0).xyz;
	     	// get normal from pos before translating and offsetting it        	
		    Out.norm = normalize(pos);
	    	// scale factor:
	    	pos *= scaleFactor0;
	    	// final Position:
		    pos += pos0 + offsetVec0;
		    Out.pos = pos;//float4(pos, 1);
	    	Out.Col = Col_0;//float3(tubeUcoord0,0,0);
	    	// out id:
	//    	Out.tubeID = In[0].tubeID;
	    	//Out.info = In[0].info;
		    TriangleOutputStream.Append(Out);   
	    	
			// Point 1:
	    	// section extrusion:
		    pos = GetPosition(i,TubeShapeRes,Thickness1);
			// Orientation
	    	pos = mul(float4(pos,1), rot1).xyz;
	    	// get normal from pos before translating and offsetting it        	
		    Out.norm = normalize(pos);
	    	// scale factor:
	    	pos *= scaleFactor1;
	    	// final Position:
		    pos += pos1 + offsetVec1;
		    Out.pos = pos;//float4(pos, 1);
	     	Out.Col = Col_1;//float3(tubeUcoord1,0,0);
	   	// out id:
	//    	Out.tubeID = In[1].tubeID;
	    	//Out.info = In[1].info;
	
		    TriangleOutputStream.Append(Out);    	
	    }
		TriangleOutputStream.RestartStrip();
		
	
		// CAPS ========================================
		// BOTTOM ========================================
	
		//dir cull
		bool CapDirCull = 1;//dot(CullDir,-tang0) > 0; 
	
		for(int c=0; c<TubeShapeRes && tubeUcoord0==0 && CapDirCull; c++)
	    {
		    GS_OUTPUT Out; 	
		
	    	
		    // Point 0:
		    Out.pos = pos0;
	    	Out.norm = tang0;
	     	Out.Col = Col_0;
		    TriangleOutputStream.Append(Out);    	
	    	
	        // Point 1:
		    float3 pos = GetPosition(c,TubeShapeRes,Thickness0*scaleFactor0);
	
	    	// Orientation
	    	pos = mul(float4(pos,1), rot0).xyz;
		    pos += pos0;
		    Out.pos = pos;
		    TriangleOutputStream.Append(Out);   
	    	
		}
		TriangleOutputStream.RestartStrip();
	
	
		// TOP ========================================

		//dir cull
		CapDirCull = 1;//dot(CullDir, tang1) > 0; 

		for(int c2=0; c2<TubeShapeRes && tubeUcoord1>0.99 && CapDirCull; c2++)
	    {
		    GS_OUTPUT Out; 	
		    // Point 0:
	    	// section position:
		    float3 pos = GetPosition(c2,TubeShapeRes,Thickness1*scaleFactor1);
		   	// Orientation
	    	pos = mul(float4(pos,1), rot1).xyz;
	    	// Offset from spline:
	    	//float3 offset = mul(float3(0,ThRoOf.z,0), rotate(pitchYaw.x, pitchYaw.y, ThRoOf.y));
	    	// get normal from pos before translating and offsetting it        	
		    float3 norm = -tang1;//normalize(pos);
	    	// final Position:
		    pos += pos1 + offsetVec1;
		    Out.pos = pos;//float4(pos, 1);
	    	// final Normal:
	    	Out.norm = norm;
	    	Out.Col = Col_1;//float3(tubeUcoord1,0,0);
	    	// out id:
	//    	Out.tubeID = In[0].tubeID;
	    	//Out.info = In[0].info;
		    TriangleOutputStream.Append(Out);   
	    	
	    // Point 1:
		    Out.pos = pos1 + offsetVec1;
		    TriangleOutputStream.Append(Out);    	
		}
		TriangleOutputStream.RestartStrip();
	}
}

[maxvertexcount(2)]
void GS_Lines(line DS_OUTPUT In[2], inout LineStream<GS_OUTPUT> LineOutputStream)
{
    float3 pos0 = In[0].position;
    float3 pos1 = In[1].position;
    float3 tang0 = In[0].tangent;
    float3 tang1 = In[1].tangent;	
	
	float SplineUpos0 = In[0].FilamentUcoord;
	float SplineUpos1 = In[1].FilamentUcoord;
		
	float3 Col_0 = ColRampTex.SampleLevel(s, SplineUpos0, 0).xyz;
	float3 Col_1 = ColRampTex.SampleLevel(s, SplineUpos1, 0).xyz;
	

    GS_OUTPUT Out; 	

	// Point 0:
	Out.pos = pos0;		//float4(pos, 1);
	Out.Col = Col_0;	//float3(tubeUcoord0,0,0);
	Out.norm = tang0;
	LineOutputStream.Append(Out);   
	    	
	// Point 1:
	Out.pos = pos1;		//float4(pos, 1);
	Out.Col = Col_1;	//float3(tubeUcoord0,0,0);
	Out.norm = tang1;
	LineOutputStream.Append(Out);   

	LineOutputStream.RestartStrip();
		
	
}

//==============================================================================
//==============================================================================
// TECHNIQUES ==================================================================
//==============================================================================
//==============================================================================

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS_Tubes() ), "POSITION.xyz;NORMAL.xyz;COLOR.xyz" );//;TEXCOORD0.x" );
GeometryShader StreamOutGS2 = ConstructGSWithSO( CompileShader( gs_5_0, GS_Lines() ), "POSITION.xyz;NORMAL.xyz;COLOR.xyz" );//;TEXCOORD0.x" );

technique11 Tubes
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetHullShader( CompileShader( hs_5_0, HS() ) );
		SetDomainShader( CompileShader( ds_5_0, DS() ) );
		SetGeometryShader( StreamOutGS );
	}
}

technique11 Lines
{
	pass P0
	{
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetHullShader( CompileShader( hs_5_0, HS() ) );
		SetDomainShader( CompileShader( ds_5_0, DS() ) );
		SetGeometryShader( StreamOutGS2 );
	}
}

