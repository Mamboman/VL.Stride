shader ChromaKey : TextureFX
{
    // convert rgb to yuv
    static const float4x4 RGBtoYUV = float4x4(	0.257,  0.439, -0.148, 0.0,
                                    0.504, -0.368, -0.291, 0.0,
                                    0.098, -0.071,  0.439, 0.0,
                                    0.0625, 0.500,  0.500, 1.0 );

    //color to be removed
    [Color]
    float4 chromaKey = float4(0.05f, 0.63f, 0.14f, 1.0f);

    // blend this color in the edges
    [Color]
    float4 BackgroundColor = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // the variables to tweak the keying
    float2 maskRange <float uimin=0.0;float uimax=1.0;> = float2(0.005f, 0.26f);


    // method to calculate the chroma mask
    float CalcMask(float3 yuv, float3 keyYuv)
    {
        float tmp = sqrt(pow(keyYuv.g - yuv.g, 2.0) + pow(keyYuv.b - yuv.b, 2.0));
        if (tmp < maskRange.x)
          return 0.0;
        else if (tmp < maskRange.y)
          return (tmp - maskRange.x)/(maskRange.y - maskRange.x);
        else
          return 1.0;
    }

    stage override float4 Shading()
    {
        float4 col = InTex();

        // convert to YUV
        float4 keyYUV =  mul(chromaKey, RGBtoYUV );
        float4 yuv = mul(col, RGBtoYUV );

        float mask = 1.0 - CalcMask(yuv.rgb, keyYUV.rgb);
    
        //float4 bg = float4(BackgroundColor.r, BackgroundColor.g, BackgroundColor.b, Alpha);
    
        float4 blend = max(col - mask * chromaKey, 0.0) + BackgroundColor * mask;
    
        return blend * blend.a;
    }
};