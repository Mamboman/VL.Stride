
shader InstancedMeshStreamOut : Common_InstanceWorld
{
    stream uint InstanceID : SV_InstanceID;
    stream float4 ShadingPosition : SV_Position;

    stream float3 PositionIn : POSITION;
    stream float3 NormalIn : NORMAL;
    stream float2 TexCoordIn : TEXCOORD0;
    stream float4 Normal : TEXCOORD1;
    stream float4 TexCoord : TEXCOORD2;

    //stream float4 Tangent : TANGENT;

    void VSMain() 
    {
        float4x4 iw = InstanceWorld[streams.InstanceID].Matrix;

        streams.ShadingPosition = mul(float4(streams.PositionIn.xyz, 1), iw);
        streams.Normal = mul(float4(streams.NormalIn.xyz, 0), iw);
        //streams.Tangent = mul(streams.Tangent, iw);
        streams.TexCoord = float4(streams.TexCoordIn, 0, 0);

        //streams.ShadingPosition = mul(streams.Position, iw);
        //streams.Normal = mul(float4(streams.Normal.xyz, 0), iw);
        ////streams.Tangent = mul(streams.Tangent, iw);
        //streams.TexCoord = streams.TexCoord;
    }

    ////[StreamOutput("SV_Position.xyzw;TEXCOORD1.xyzw;TEXCOORD2.xyzw")]
    //[StreamOutput("0:SV_Position.xyzw;0:TEXCOORD1.xyzw")]
    //[maxvertexcount(1)]
    //void GSMain(point Input input[1], inout PointStream<Output> vertexStream) 
    //{
    //    /* we make it explicit that THEY ARE BEING USED or the other fields will be optimized out*/
    //    streams.ShadingPosition = input[0].ShadingPosition;
    //    streams.Normal = input[0].Normal;
    //    //streams.TexCoord = input[0].TexCoord;
    //    //streams.Tangent = input[0].Tangent;
    //    vertexStream.Append(streams);
    //}

    void AppendVertex(Input In, inout TriangleStream<Output> vertexStream)
    {
        streams.ShadingPosition = In.ShadingPosition;
        streams.Normal = In.Normal;
        //streams.TexCoord = input[0].TexCoord;
        //streams.Tangent = input[0].Tangent;
        vertexStream.Append(streams);
    }

    //[StreamOutput("SV_Position.xyzw;TEXCOORD1.xyzw;TEXCOORD2.xyzw")]
    [StreamOutput("SV_Position.xyzw;TEXCOORD1.xyzw")]
    [maxvertexcount(3)]
    void GSMain(triangle Input input[3], inout TriangleStream<Output> vertexStream) 
    {
        for(int i=0; i < 3; i++)
        {
            AppendVertex(input[i], vertexStream);
        }
    }

    
};